{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useContext, useState } from 'react';\nimport * as AuthSession from 'expo-auth-session';\nimport { SCOPE, CLIENT_ID, REDIRECT_URI, RESPONDE_TYPE } from \"../configs\";\nimport { api } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext({});\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  function signIn() {\n    var authUrl, response;\n    return _regeneratorRuntime.async(function signIn$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setLoading(true);\n            authUrl = api.defaults.baseURL + \"/oauth2/authorize?client_id=\" + CLIENT_ID + \"&redirect_uri=\" + REDIRECT_URI + \"&response_type=\" + RESPONDE_TYPE + \"&scope=\" + SCOPE;\n            console.log(authUrl);\n            response = AuthSession.startAsync({\n              authUrl: authUrl\n            });\n            console.log(response);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            throw new Error('Não foi possível autenticar');\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      signIn: signIn\n    },\n    children: children\n  });\n}\nexport function useAuth() {\n  var context = useContext(AuthContext);\n  return context;\n}","map":{"version":3,"sources":["/home/vithor/Documents/Projects/nlw_together/Gameplay/src/hooks/auth.tsx"],"names":["React","createContext","useContext","useState","AuthSession","SCOPE","CLIENT_ID","REDIRECT_URI","RESPONDE_TYPE","api","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","signIn","authUrl","defaults","baseURL","console","log","response","startAsync","Error","useAuth","context"],"mappings":";;AAAA,OAAOA,KAAP,IACIC,aADJ,EAEIC,UAFJ,EAGIC,QAHJ,QAKO,OALP;AAMA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AAEA,SACIC,KADJ,EAEIC,SAFJ,EAIIC,YAJJ,EAKIC,aALJ;AAMA,SAASC,GAAT;;AAqBA,OAAO,IAAMC,WAAW,GAAGT,aAAa,CAAC,EAAD,CAAjC;AAGP,OAAO,SAASU,YAAT,OAAsD;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;;AACzD,kBAAwBT,QAAQ,CAAO,EAAP,CAAhC;AAAA;AAAA,MAAOU,IAAP;AAAA,MAAaC,OAAb;;AAEA,mBAA8BX,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOY,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,WAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQD,YAAAA,UAAU,CAAC,IAAD,CAAV;AAEME,YAAAA,OAJd,GAI2BT,GAAG,CAACU,QAAJ,CAAaC,OAJxC,oCAI8Ed,SAJ9E,sBAIwGC,YAJxG,uBAIsIC,aAJtI,eAI6JH,KAJ7J;AAKQgB,YAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AAEMK,YAAAA,QAPd,GAOyBnB,WAAW,CAACoB,UAAZ,CAAuB;AAAEN,cAAAA,OAAO,EAAPA;AAAF,aAAvB,CAPzB;AAQQG,YAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AARR;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAWc,IAAIE,KAAJ,CAAU,6BAAV,CAXd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SACI,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBZ,MAAAA,IAAI,EAAJA,IADyB;AAEzBI,MAAAA,MAAM,EAANA;AAFyB,KAA7B;AAAA,cAIKL;AAJL,IADJ;AAQH;AAGD,OAAO,SAASc,OAAT,GAAmB;AACtB,MAAMC,OAAO,GAAGzB,UAAU,CAACQ,WAAD,CAA1B;AACA,SAAOiB,OAAP;AACH","sourcesContent":["import React, { \n    createContext,\n    useContext,\n    useState,\n    ReactNode\n} from 'react';\nimport * as AuthSession from 'expo-auth-session';\n\nimport { \n    SCOPE, \n    CLIENT_ID, \n    CDN_IMAGE, \n    REDIRECT_URI,\n    RESPONDE_TYPE} from '../configs';\nimport { api } from '../services/api';\n\ntype User = {\n    id: string;\n    username: string;\n    firstName: string;\n    avatar: string;\n    email: string;\n    token: string;\n}\n\ntype AuthContextData = {\n    user: User;\n    signIn: () => Promise<void>;\n}\n\ntype AuthProviderProps = {\n    children: ReactNode;\n}\n\n//valor inicial\nexport const AuthContext = createContext({} as AuthContextData); \n\n//Passar para o provide quem vai ter acessoa esse contexto\nexport function AuthProvider({ children }: AuthProviderProps){\n    const [user, setUser] = useState<User>({} as User);\n    //saber se o já acabou o processo de autenticação\n    const [loading, setLoading] = useState(false);\n\n    async function signIn() {\n        try {\n            setLoading(true);\n            \n            const authUrl = `${api.defaults.baseURL}/oauth2/authorize?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONDE_TYPE}&scope=${SCOPE}`\n            console.log(authUrl)\n            //authUrl - para onde user tem que ir quando começar o processo de autenticação\n            const response = AuthSession.startAsync({ authUrl });\n            console.log(response);\n\n        } catch {\n            throw new Error('Não foi possível autenticar');\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            user,\n            signIn\n        }}>\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\n//criando nosso proprio hook\nexport function useAuth() {\n    const context = useContext(AuthContext);\n    return context;\n}\n\n"]},"metadata":{},"sourceType":"module"}